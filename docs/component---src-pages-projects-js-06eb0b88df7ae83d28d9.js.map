{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/utils/helpers.js"],"names":["data","allProjects","allMarkdownRemark","edges","allFeaturedImages","allFile","featuredImageMap","Utils","getImageMap","title","className","map","node","key","id","to","fields","slug","featuredImages","frontmatter","tags","excerpt","query","images","regex","hasMultipleImages","limit","reduce","image","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr"],"mappings":"8FAAA,0GAMe,sBAAe,IAAZA,EAAW,EAAXA,KACVC,EAAcD,EAAKE,kBAAkBC,OAAS,GAC9CC,EAAoBJ,EAAKK,QAAQF,OAAS,GAE1CG,EAAmBC,IAAMC,YAAYJ,EAD7B,sBACuD,EAAM,GAE3E,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKK,MAAM,aACX,kBAAC,IAAD,CAAWA,MAAM,aACjB,kBAAC,IAAD,CAAWC,UAAU,aACnB,iCACGT,EAAYU,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACf,yBAAKC,IAAKD,EAAKE,GAAIJ,UAAU,OAC3B,kBAAC,IAAD,CACEK,GAAIH,EAAKI,OAAOC,KAChBC,eAAgBZ,EAAiBM,EAAKI,OAAOC,MAC7CR,MAAOG,EAAKO,YAAYV,MACxBW,KAAMR,EAAKO,YAAYC,KACvBC,QAAST,EAAKS,UAEhB,qCASP,IAAMC,EAAK,c,0KCpCH,GACbd,YAAa,SAACe,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAAChB,EAAKiB,GACzB,IAAMX,EAAOW,EAAMhB,KAAKiB,aAAaC,MAAMN,GAAO,GAClD,GAAIC,EACF,GAAId,EAAIoB,eAAed,GACjBN,EAAIM,GAAMe,QAAUN,GACtBf,EAAIM,GAAMgB,KAAKL,EAAMhB,KAAKsB,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKL,EAAMhB,KAAKsB,gBAAgBC,OACpCxB,EAAIM,GAAQmB,OAGdzB,EAAIM,GAAQW,EAAMhB,KAAKsB,gBAAgBC,MAEzC,OAAOxB,IACN","file":"component---src-pages-projects-js-06eb0b88df7ae83d28d9.js","sourcesContent":["import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { PageLayout, PageTitle, ProjectLink } from \"../components\"\r\nimport { SEO, Utils } from \"../utils\"\r\nimport Container from \"react-bootstrap/Container\"\r\n\r\nexport default ({ data }) => {\r\n  const allProjects = data.allMarkdownRemark.edges || []\r\n  const allFeaturedImages = data.allFile.edges || []\r\n  const regex = /\\/[projects].*\\/|$/\r\n  const featuredImageMap = Utils.getImageMap(allFeaturedImages, regex, true, 3)\r\n\r\n  return (\r\n    <PageLayout>\r\n      <SEO title=\"Projects\" />\r\n      <PageTitle title=\"Projects\" />\r\n      <Container className=\"text-left\">\r\n        <section>\r\n          {allProjects.map(({ node }) => (\r\n            <div key={node.id} className=\"p-3\">\r\n              <ProjectLink\r\n                to={node.fields.slug}\r\n                featuredImages={featuredImageMap[node.fields.slug]}\r\n                title={node.frontmatter.title}\r\n                tags={node.frontmatter.tags}\r\n                excerpt={node.excerpt}\r\n              />\r\n              <hr />\r\n            </div>\r\n          ))}\r\n        </section>\r\n      </Container>\r\n    </PageLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            description\r\n            tags\r\n            date(formatString: \"DD MMMM, YYYY\")\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n          excerpt\r\n        }\r\n      }\r\n    }\r\n    allFile(\r\n      filter: {\r\n        extension: { eq: \"png\" }\r\n        relativePath: { regex: \"/feature/\" }\r\n        relativeDirectory: { regex: \"/content/projects/\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          childImageSharp {\r\n            fluid(maxWidth: 400) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n          relativePath\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","export default {\r\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\r\n    return images.reduce((map, image) => {\r\n      const slug = image.node.relativePath.match(regex)[0]\r\n      if (hasMultipleImages) {\r\n        if (map.hasOwnProperty(slug)) {\r\n          if (map[slug].length <= limit)\r\n            map[slug].push(image.node.childImageSharp.fluid)\r\n        } else {\r\n          const arr = []\r\n          arr.push(image.node.childImageSharp.fluid)\r\n          map[slug] = arr\r\n        }\r\n      } else {\r\n        map[slug] = image.node.childImageSharp.fluid\r\n      }\r\n      return map\r\n    }, {})\r\n  },\r\n}\r\n"],"sourceRoot":""}